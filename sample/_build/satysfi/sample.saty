@require: stdjabook
@require: code
@require: itemize
@require: tabular

document (|
  title = {SATySFi Builder};
  author = {shirou};
  show-title = true;
  show-toc = true;
|) '<
  +section  ?:(`id1`) {はじめに}<
    +p{
最近では一人が数十台、数百台ものサーバーを管理することも珍しくありません。また、クラウド上にものの数分でサーバーを作成、あるいは削除することも日常茶飯事です。
      }

    +p{
その場合、
      }

    +listing{

 * 新規作成したサーバーに多数のソフトウェアをインストールする
 * 設定ファイルを適切に管理・維持する
    }

    +p{
といったことが必要になってきます。これを手動で多数のサーバーに対して実行することは困難ですし、間違いが入り込む余地は非常に大きいです。
      }

    +p{
そこで重要な位置づけとなってきたツールが\emph{構成管理ツール}です。構成管理ツールとは、ソフトウェアや設定ファイルなどの対象とするサーバーの構成を適切に管理し、維持するツールです。新規作成したサーバーなどは指定した構成になっておりませんので、構成管理ツールはそのサーバーを自動的に適切な構成へと変更します。
      }

    +p{
Ansibleは構成管理ツールの一つです。ただ、それだけにとどまらない、任意のコマンドをリモートで実行したり、結果を取得したりする\emph{オーケストレーショ
ンツール}でもあります。
      }

    +p{
オーケストレーションツールの正確な定義は定まっておりませんが、ここでは以下の操作ができるものとします。
      }

    +listing{

 * 構成管理が可能
 * ソースコードをサーバーにコピーする、再起動する、などのデプロイが可能
 * アドホックコマンドにより、任意のコマンドをいつでも複数のサーバーに実行可能
 * 他のシステムとの連携をし、複雑な業務のワークフローを支えるシステムを構築可能
    }

    +p{
Ansibleは、これらのことがすべてできます。単なる構成管理ではなく、デプロイなどの定形作業、障害時の非定形作業、あるいは他のシステムとの連携し、通知や自動実行までAnsible一つで行えます。
      }

    +p{
個々の操作はそれぞれ別々のツールがあると思います。しかし、これらを一つで統一的にこなせるツールは現状ではAnsibleが最も有力でしょう。
      }

    +subsection  ?:(`ansible`) {Ansibleの特徴}<
    +p{
構成管理ツールおよびオーケストレーションツールについて説明したところで、ここではAnsibleの特徴を述べ、どのようなものなのか解説していきます。
      }

    +subsection  ?:(`ssh`) {sshだけがあればいい}<
    +p{
ChefやPuppetなど、多くの構成管理ツールは、エージェントと呼ばれるソフトウェアを操作対象のホストにインストールする必要があります。
      }

    +p{
しかし、Ansibleは "ssh" が使えればそれだけで使い始められます(実際にはPythonが必要ですが、ほぼすべてのOSに標準で付属しています)。sshはUNIX系OSのホストを管理するためには必須のツールであり、極めて一般的です。
      }

    +p{
サーバーが他社によって管理されており、自由にソフトウェアをインストールすることが出来ない場合もあります。その場合にもAnsibleは使えます。さらに言うと、sshを適切に設定することにより、踏み台サーバー経由で管理することも出来ます。これらはAnsibleの適用場所を広げてくれます。
      }

>>>>
